//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Baza_szwalniaEntities : DbContext
    {
        public Baza_szwalniaEntities()
            : base("name=Baza_szwalniaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Czesci_obsluga> Czesci_obsluga { get; set; }
        public virtual DbSet<Dokumentacja_proces> Dokumentacja_proces { get; set; }
        public virtual DbSet<Dokumentacje> Dokumentacje { get; set; }
        public virtual DbSet<Elementy_proces> Elementy_proces { get; set; }
        public virtual DbSet<Etapy_w_procesie> Etapy_w_procesie { get; set; }
        public virtual DbSet<Etat> Etat { get; set; }
        public virtual DbSet<Faktury> Faktury { get; set; }
        public virtual DbSet<Faktury_zewnetrzne> Faktury_zewnetrzne { get; set; }
        public virtual DbSet<Grupa> Grupa { get; set; }
        public virtual DbSet<Jezyk> Jezyk { get; set; }
        public virtual DbSet<Klienci> Klienci { get; set; }
        public virtual DbSet<Magazyn_dostarczenia_wewn> Magazyn_dostarczenia_wewn { get; set; }
        public virtual DbSet<Magazyn_dostarczenia_zewn> Magazyn_dostarczenia_zewn { get; set; }
        public virtual DbSet<Magazyn_dostawcy_zaopatrzenie> Magazyn_dostawcy_zaopatrzenie { get; set; }
        public virtual DbSet<Magazyn_elementy> Magazyn_elementy { get; set; }
        public virtual DbSet<Magazyn_elementy_cechy_slownik> Magazyn_elementy_cechy_slownik { get; set; }
        public virtual DbSet<Magazyn_elementy_jednostki> Magazyn_elementy_jednostki { get; set; }
        public virtual DbSet<Magazyn_elementy_typy> Magazyn_elementy_typy { get; set; }
        public virtual DbSet<Magazyn_kurierzy> Magazyn_kurierzy { get; set; }
        public virtual DbSet<Magazyn_miejsca> Magazyn_miejsca { get; set; }
        public virtual DbSet<Magazyn_oferta> Magazyn_oferta { get; set; }
        public virtual DbSet<Magazyn_polki> Magazyn_polki { get; set; }
        public virtual DbSet<Magazyn_polki_rozmiary> Magazyn_polki_rozmiary { get; set; }
        public virtual DbSet<Magazyn_umowy_kurierzy> Magazyn_umowy_kurierzy { get; set; }
        public virtual DbSet<Magazyn_zamowienia_dostawy> Magazyn_zamowienia_dostawy { get; set; }
        public virtual DbSet<Maszyny> Maszyny { get; set; }
        public virtual DbSet<Maszyny_proces> Maszyny_proces { get; set; }
        public virtual DbSet<Obsluga_techniczna> Obsluga_techniczna { get; set; }
        public virtual DbSet<Pensja> Pensja { get; set; }
        public virtual DbSet<Pracownicy> Pracownicy { get; set; }
        public virtual DbSet<Proces_Produkcyjny> Proces_Produkcyjny { get; set; }
        public virtual DbSet<Proces_technologiczny> Proces_technologiczny { get; set; }
        public virtual DbSet<Proces_zamowienie> Proces_zamowienie { get; set; }
        public virtual DbSet<Produkty> Produkty { get; set; }
        public virtual DbSet<Realizacja_procesu> Realizacja_procesu { get; set; }
        public virtual DbSet<Rodzaj_dokumentacji> Rodzaj_dokumentacji { get; set; }
        public virtual DbSet<Rodzaj_etapu> Rodzaj_etapu { get; set; }
        public virtual DbSet<Rodzaj_maszyny> Rodzaj_maszyny { get; set; }
        public virtual DbSet<Rodzaj_obslugi> Rodzaj_obslugi { get; set; }
        public virtual DbSet<Rodzaj_Umowy> Rodzaj_Umowy { get; set; }
        public virtual DbSet<Stanowisko> Stanowisko { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Zamowienia> Zamowienia { get; set; }
        public virtual DbSet<Zamowienie_produkt> Zamowienie_produkt { get; set; }
        public virtual DbSet<Znajomosc_jezykow> Znajomosc_jezykow { get; set; }
        public virtual DbSet<Kontrola_efektywnosci> Kontrola_efektywnosci { get; set; }
        public virtual DbSet<Koszt_jednostkowy> Koszt_jednostkowy { get; set; }
        public virtual DbSet<Material_na_produkcji> Material_na_produkcji { get; set; }
        public virtual DbSet<Pracownicy_zatrudnienie> Pracownicy_zatrudnienie { get; set; }
        public virtual DbSet<Przydzial_zasobow> Przydzial_zasobow { get; set; }
        public virtual DbSet<Zapotrzebowanie_opakowan> Zapotrzebowanie_opakowan { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
